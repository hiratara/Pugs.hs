module Pugs.Wugs
       ( perl6ToWerl6
       , werl6ToPerl6
       ) where

import Data.List (find)

werl6perl6 :: [(String, String)]
werl6perl6 =
  [ ("w", "m")
  , ("W", "q")
  , ("ww", "s")
  , ("wW", "x")
  , ("Ww", "y")
  , ("WW", "do")
  , ("www", "eq")
  , ("wwW", "ge")
  , ("wWw", "gt")
  , ("wWW", "if")
  , ("Www", "lc")
  , ("WwW", "le")
  , ("WWw", "lt")
  , ("WWW", "my")
  , ("wwww", "ne")
  , ("wwwW", "no")
  , ("wwWw", "or")
  , ("wwWW", "qq")
  , ("wWww", "qr")
  , ("wWwW", "qw")
  , ("wWWw", "qx")
  , ("wWWW", "tr")
  , ("Wwww", "uc")
  , ("WwwW", "END")
  , ("WwWw", "abs")
  , ("WwWW", "and")
  , ("WWww", "chr")
  , ("WWwW", "cmp")
  , ("WWWw", "cos")
  , ("WWWW", "die")
  , ("wwwww", "eof")
  , ("wwwwW", "exp")
  , ("wwwWw", "for")
  , ("wwwWW", "hex")
  , ("wwWww", "int")
  , ("wwWwW", "log")
  , ("wwWWw", "map")
  , ("wwWWW", "not")
  , ("wWwww", "oct")
  , ("wWwwW", "ord")
  , ("wWwWw", "our")
  , ("wWwWW", "pop")
  , ("wWWww", "pos")
  , ("wWWwW", "ref")
  , ("wWWWw", "say")
  , ("wWWWW", "sin")
  , ("Wwwww", "sub")
  , ("WwwwW", "tie")
  , ("WwwWw", "use")
  , ("WwwWW", "vec")
  , ("WwWww", "xor")
  , ("WwWwW", "CORE")
  , ("WwWWw", "INIT")
  , ("WwWWW", "bind")
  , ("WWwww", "chop")
  , ("WWwwW", "dump")
  , ("WWwWw", "each")
  , ("WWwWW", "else")
  , ("WWWww", "eval")
  , ("WWWwW", "exec")
  , ("WWWWw", "exit")
  , ("WWWWW", "fork")
  , ("wwwwww", "getc")
  , ("wwwwwW", "glob")
  , ("wwwwWw", "goto")
  , ("wwwwWW", "grep")
  , ("wwwWww", "join")
  , ("wwwWwW", "keys")
  , ("wwwWWw", "kill")
  , ("wwwWWW", "last")
  , ("wwWwww", "link")
  , ("wwWwwW", "lock")
  , ("wwWwWw", "next")
  , ("wwWwWW", "open")
  , ("wwWWww", "pack")
  , ("wwWWwW", "pipe")
  , ("wwWWWw", "push")
  , ("wwWWWW", "rand")
  , ("wWwwww", "read")
  , ("wWwwwW", "recv")
  , ("wWwwWw", "redo")
  , ("wWwwWW", "seek")
  , ("wWwWww", "send")
  , ("wWwWwW", "sort")
  , ("wWwWWw", "sqrt")
  , ("wWwWWW", "stat")
  , ("wWWwww", "tell")
  , ("wWWwwW", "tied")
  , ("wWWwWw", "time")
  , ("wWWwWW", "wait")
  , ("wWWWww", "warn")
  , ("wWWWwW", "when")
  , ("wWWWWw", "BEGIN")
  , ("wWWWWW", "CHECK")
  , ("Wwwwww", "alarm")
  , ("WwwwwW", "atan2")
  , ("WwwwWw", "bless")
  , ("WwwwWW", "break")
  , ("WwwWww", "chdir")
  , ("WwwWwW", "chmod")
  , ("WwwWWw", "chomp")
  , ("WwwWWW", "chown")
  , ("WwWwww", "close")
  , ("WwWwwW", "crypt")
  , ("WwWwWw", "elsif")
  , ("WwWwWW", "fcntl")
  , ("WwWWww", "flock")
  , ("WwWWwW", "given")
  , ("WwWWWw", "index")
  , ("WwWWWW", "ioctl")
  , ("WWwwww", "local")
  , ("WWwwwW", "lstat")
  , ("WWwwWw", "mkdir")
  , ("WWwwWW", "print")
  , ("WWwWww", "reset")
  , ("WWwWwW", "rmdir")
  , ("WWwWWw", "semop")
  , ("WWwWWW", "shift")
  , ("WWWwww", "sleep")
  , ("WWWwwW", "split")
  , ("WWWwWw", "srand")
  , ("WWWwWW", "state")
  , ("WWWWww", "study")
  , ("WWWWwW", "times")
  , ("WWWWWw", "umask")
  , ("WWWWWW", "undef")
  , ("wwwwwww", "untie")
  , ("wwwwwwW", "until")
  , ("wwwwwWw", "utime")
  , ("wwwwwWW", "while")
  , ("wwwwWww", "write")
  , ("wwwwWwW", "accept")
  , ("wwwwWWw", "caller")
  , ("wwwwWWW", "chroot")
  , ("wwwWwww", "delete")
  , ("wwwWwwW", "elseif")
  , ("wwwWwWw", "exists")
  , ("wwwWwWW", "fileno")
  , ("wwwWWww", "format")
  , ("wwwWWwW", "gmtime")
  , ("wwwWWWw", "length")
  , ("wwwWWWW", "listen")
  , ("wwWwwww", "msgctl")
  , ("wwWwwwW", "msgget")
  , ("wwWwwWw", "msgrcv")
  , ("wwWwwWW", "msgsnd")
  , ("wwWwWww", "printf")
  , ("wwWwWwW", "rename")
  , ("wwWwWWw", "return")
  , ("wwWwWWW", "rindex")
  , ("wwWWwww", "scalar")
  , ("wwWWwwW", "select")
  , ("wwWWwWw", "semctl")
  , ("wwWWwWW", "semget")
  , ("wwWWWww", "shmctl")
  , ("wwWWWwW", "shmget")
  , ("wwWWWWw", "socket")
  , ("wwWWWWW", "splice")
  , ("wWwwwww", "substr")
  , ("wWwwwwW", "system")
  , ("wWwwwWw", "unless")
  , ("wWwwwWW", "unlink")
  , ("wWwwWww", "unpack")
  , ("wWwwWwW", "values")
  , ("wWwwWWw", "DESTROY")
  , ("wWwwWWW", "__END__")
  , ("wWwWwww", "binmode")
  , ("wWwWwwW", "connect")
  , ("wWwWwWw", "dbmopen")
  , ("wWwWwWW", "default")
  , ("wWwWWww", "defined")
  , ("wWwWWwW", "foreach")
  , ("wWwWWWw", "getpgrp")
  , ("wWwWWWW", "getppid")
  , ("wWWwwww", "lcfirst")
  , ("wWWwwwW", "opendir")
  , ("wWWwwWw", "package")
  , ("wWWwwWW", "readdir")
  , ("wWWwWww", "require")
  , ("wWWwWwW", "reverse")
  , ("wWWwWWw", "seekdir")
  , ("wWWwWWW", "setpgrp")
  , ("wWWWwww", "shmread")
  , ("wWWWwwW", "sprintf")
  , ("wWWWwWw", "symlink")
  , ("wWWWwWW", "syscall")
  , ("wWWWWww", "sysopen")
  , ("wWWWWwW", "sysread")
  , ("wWWWWWw", "sysseek")
  , ("wWWWWWW", "telldir")
  , ("Wwwwwww", "ucfirst")
  , ("WwwwwwW", "unshift")
  , ("WwwwwWw", "waitpid")
  , ("WwwwwWW", "AUTOLOAD")
  , ("WwwwWww", "__DATA__")
  , ("WwwwWwW", "__FILE__")
  , ("WwwwWWw", "__LINE__")
  , ("WwwwWWW", "closedir")
  , ("WwwWwww", "continue")
  , ("WwwWwwW", "dbmclose")
  , ("WwwWwWw", "endgrent")
  , ("WwwWwWW", "endpwent")
  , ("WwwWWww", "formline")
  , ("WwwWWwW", "getgrent")
  , ("WwwWWWw", "getgrgid")
  , ("WwwWWWW", "getgrnam")
  , ("WwWwwww", "getlogin")
  , ("WwWwwwW", "getpwent")
  , ("WwWwwWw", "getpwnam")
  , ("WwWwwWW", "getpwuid")
  , ("WwWwWww", "readline")
  , ("WwWwWwW", "readlink")
  , ("WwWwWWw", "readpipe")
  , ("WwWwWWW", "setgrent")
  , ("WwWWwww", "setpwent")
  , ("WwWWwwW", "shmwrite")
  , ("WwWWwWw", "shutdown")
  , ("WwWWwWW", "syswrite")
  , ("WwWWWww", "truncate")
  , ("WwWWWwW", "UNITCHECK")
  , ("WwWWWWw", "endnetent")
  , ("WwWWWWW", "getnetent")
  , ("WWwwwww", "localtime")
  , ("WWwwwwW", "prototype")
  , ("WWwwwWw", "quotemeta")
  , ("WWwwwWW", "rewinddir")
  , ("WWwwWww", "setnetent")
  , ("WWwwWwW", "wantarray")
  , ("WWwwWWw", "endhostent")
  , ("WWwwWWW", "endservent")
  , ("WWwWwww", "gethostent")
  , ("WWwWwwW", "getservent")
  , ("WWwWwWw", "getsockopt")
  , ("WWwWwWW", "sethostent")
  , ("WWwWWww", "setservent")
  , ("WWwWWwW", "setsockopt")
  , ("WWwWWWw", "socketpair")
  , ("WWwWWWW", "__PACKAGE__")
  , ("WWWwwww", "endprotoent")
  , ("WWWwwwW", "getpeername")
  , ("WWWwwWw", "getpriority")
  , ("WWWwwWW", "getprotoent")
  , ("WWWwWww", "getsockname")
  , ("WWWwWwW", "setpriority")
  , ("WWWwWWw", "setprotoent")
  , ("WWWwWWW", "getnetbyaddr")
  , ("WWWWwww", "getnetbyname")
  , ("WWWWwwW", "gethostbyaddr")
  , ("WWWWwWw", "gethostbyname")
  , ("WWWWwWW", "getservbyname")
  , ("WWWWWww", "getservbyport")
  , ("WWWWWwW", "getprotobyname")
  , ("WWWWWWw", "getprotobynumber")
  ]

perl6ToWerl6 :: String -> Maybe String
perl6ToWerl6 p = fmap fst $ find (\(x, y) -> y == p) werl6perl6

werl6ToPerl6 :: String -> Maybe String
werl6ToPerl6 w = fmap snd $ find (\(x, y) -> x == w) werl6perl6
